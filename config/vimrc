""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nathan's vimrc.  Like it or lump it.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" TODO: harvest more good ideas from these
" http://stackoverflow.com/questions/164847/what-is-in-your-vimrc
" http://nvie.com/posts/how-i-boosted-my-vim/
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General behavioral settings

" use pathogen for sanity
"call pathogen#runtime_append_all_bundles()
" infect seems necessary to get ftdetects to work
call pathogen#infect()
" hmm but see also:
" http://stackoverflow.com/questions/3383502/pathogen-does-not-load-plugins

filetype plugin indent on

set nocompatible        " vi sucks, long live vim
set history=1000        " longer command history
set undolevels=1000     " so much undo
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set hlsearch            " highlight search matches
set smartcase           " search case-insensitive if all lower
set visualbell t_vb=    " i hate beeping!
set noerrorbells        " still hate beeping!
set hidden              " hide rather than delete buffers
set autochdir           " change to the directory of the active buffer
set showmatch           " show matching parens
set backspace=indent,eol,start  " backspace everything in insert mode
set title               " change terminal title
set scrolloff=4         " keep 4 lines off the edges of the screen when scrolling
set virtualedit=block   " allow movement into virtual space when in block mode

set splitbelow          " new split windows below old ones
set splitright          " new vsplits to the right
set shiftround          " round to nearest multiple of shiftwidth

set statusline=%F%m%r%h%w\ %{&ff}\ %{&ft}\ %P\ (%l,%v)\ %{fugitive#statusline()}
set laststatus=2        " always show status line

" put swap files in my personal tmp dir
" the double slash means that vim should use full paths,
" subbing % for /.  ~/tmp/%home%nathan%example
set directory=~/tmp//
set backupdir=~/tmp//   " keep *~ out of .

set mouse=              " disable mouse usage in terminal

set wildmenu            " show a listing of wildcard completions
set wildmode=longest,full " make completion more bash-like
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o

set clipboard=unnamed   " use gui clipboard if possible

set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·
set nolist                      " don't show invisible characters by default,
                                " but it is enabled for some file types (see later)

" python, haskell, and softtabstop have made me a spaces man
set autoindent
set copyindent          " preserve structure of previous indent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab           " write spaces instead of \t
set smarttab
set foldmethod=syntax
set foldlevel=99
set matchpairs+=<:>

set pastetoggle=<f11>   " quick toggle for paste mode

if &t_Co > 2 || has("gui_running")
    syntax on          " enable syntax highlighting
endif

if has("gui_running")
    " only looks good in the GUI
    "set cursorline          " highlight the current line
endif



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration variables

" TODO: check platform, existence of binaries, etc.
let g:haddock_browser = "/usr/bin/konqueror"
let g:haddock_indexfiledir = "~/.vim/"
" huzzah for doxygen
let g:load_doxygen_syntax=1

" don't spam me for not having ruby
let g:LustyExplorerSuppressRubyWarning = 1

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
let &guioptions = substitute(&guioptions, "t", "", "g")
" also just ditch the toolbar, since it adds nothing to a keyboard-driven app
let &guioptions = substitute(&guioptions, "T", "", "g")

" Settings for VimClojure
let g:vimclojure#HighlightBuiltins=1
let g:vimclojure#ParenRainbow=1

" SLIMV and paredit config
let g:slimv_leader=','

" default 500 -- too much is noticably slow to the point where i miss keys
" right after parentheses...
" let g:paredit_matchlines=1000
let g:paredit_electric_return=1

" i got used to \e for eval-form before i switched slimv_leader
" and \e feels more ergnomic than ,e
" TODO: make this mapping local to clojure buffers
:nnoremap \e ,e


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto Commands
if has("autocmd")
    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
        au!

        " For all text files set 'textwidth' to 78 characters.
        autocmd FileType text setlocal textwidth=78

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif
    augroup end

    augroup invisible_chars "{{{
        au!

        " Show invisible characters in all of these files
        autocmd filetype vim,c,cpp,perl,haskell,make,python,rst,ruby setlocal list
        autocmd filetype javascript,css,clojure setlocal list
    augroup end "}}}

    "http://www.cs.kent.ac.uk/people/staff/cr3/toolbox/haskell/Vim/vim.html
    au BufEnter *.hs compiler ghc

    " support MASI::Template files as html
    au BufNewFile,BufReadPost *.thtml setl filetype=html

endif " has("autocmd")


" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Keystrokes

" keys that are not mapped to anything useful that could be handy for
" remapping: H, L

" it's the default, but let's be clear
let mapleader="\\"
let maplocalleader=","

" nice tab navigation  (these need work...)
nnoremap <s-left> :tabprevious<cr>
nnoremap <s-right> :tabnext<cr>

" f4 and shift-f4 to go forward and backards in errors/greps
nnoremap <f4> :cn<cr>
nnoremap <s-f4> :cp<cr>

" <c-]> jumps to the tag under the cursor;
" <c-\> is my analogue for using :ptag
nnoremap <c-\> :exe "silent! ptag " . expand("<cword>")<cr>

" Quick yanking to the end of the line
nnoremap Y y$

" Yank/paste to the OS clipboard with ,y and ,p
nnoremap <leader>y "+y
nnoremap <leader>Y "+yy
nnoremap <leader>p "+p
nnoremap <leader>P "+P

" select recent pasted text (for indenting etc.)
nnoremap <leader>v V`]

" run Ack fast
nnoremap <leader>a :Ack<Space>

" quick change buffers
noremap <C-j> :bprev<CR>
noremap <C-k> :bnext<CR>

" Easy window navigation
noremap <A-h> <C-w>h
noremap <A-j> <C-w>j
noremap <A-k> <C-w>k
noremap <A-l> <C-w>l

" make a new vertical split and go there
nnoremap <leader>w <C-w>v<C-w>l

" cycle thru preview tags
" inspired by http://www.ashberg.de/vim/vimrc.html
noremap <C-PageUp> :ptp<cr>
noremap <C-PageDown> :ptn<cr>
inoremap <C-PageUp> <esc>:silent! ptp<cr>a
inoremap <C-PageDown> <esc>:silent! ptn<cr>a

" Don't use Ex mode, use Q for formatting
noremap Q gq

" Insert a blank line below the current line in normal mode.
" Handy because it won't continue code comments.
nnoremap <space> :put =''<cr>

" IDE-ish plugins
nnoremap <F1>  :TrinityToggleNERDTree<cr>
"nnoremap <F2>  :TrinityToggleTagList<cr>
nnoremap <F2>  :TagbarToggle<cr>
nnoremap <F3>  :TrinityToggleSourceExplorer<cr>

" filter through xml tidy (must be available on path)
" select xml text in visual mode to use
vnoremap ,x :!tidy -q -i --indent-spaces 4 -xml<CR>
nnoremap ,x :%!tidy -q -i --indent-spaces 4 -xml<CR>

" alternatively
"nnoremap ,X silent %!xmllint --encode UTF-8 --format -

" dons' haskell typeOf script
nnoremap ty yy:.!typeOf -fbang-patterns -ignore-dot-ghci %

" emergency stop for overtone synthesizer
nnoremap <f12> :call SlimvEval(["(stop)"])<cr>

" work around a typo i make constantly (:W for :w)
command W w



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Abbreviations


" quickly mark a file as vim outliner format
iab ftvo vi:ft=vo_base

" insert YYYY-MM-DD
iab <expr> _dt strftime("%F")

" insert HH:MM
iab <expr> _tt strftime("%T")

" insert YYYY-MM-DD HH:MM
iab <expr> _dtt strftime("%F %T")


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" visual settings

set t_Co=256
" colorscheme gardener
" gardener is pretty but the hlsearch color needs to be red imho
" but beware of how it would interact with cygwin or other crap terminals

if $TERM == "screen"
    " koehler always looks good in a basic terminal 
    colorscheme koehler
else
    " jellybeans is great in gvim or 256 color terminal
    colorscheme jellybeans
end

" vilight is nice but has problems such as diff mode
"colorscheme vilight


" this looks good on my x11 on hugin at least.
set guifont=Monospace\ 11
"set guifont=DejaVu\ Sans\ Mono\ 13


" highlight the word under cursor
"highlight flicker cterm=bold ctermfg=white
"au CursorMoved <buffer> exe 'match flicker /\V\<'.escape(expand('<cword>'), '/').'\>/'

" highlight chars that go over the 80-column limit
" inspired by http://drupal.org/node/29325#comment-213746
"highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
"match OverLength '\%81v.*'


" \l to toggle highlighting long lines
nnoremap <silent> <Leader>o
\ :if exists('w:long_line_match') <Bar>
\   silent! call matchdelete(w:long_line_match) <Bar>
\   unlet w:long_line_match <Bar>
\ elseif &textwidth > 0 <Bar>
\   let w:long_line_match = matchadd('ErrorMsg', '\%>'.&tw.'v.\+', -1) <Bar>
\ else <Bar>
\   let w:long_line_match = matchadd('ErrorMsg', '\%>80v.\+', -1) <Bar>
\ endif<CR>



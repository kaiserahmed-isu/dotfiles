# some handy bash aliases and functions, which outgrew my bashrc
# vi:ft=sh

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='ls --color=auto --format=vertical'
    #alias vdir='ls --color=auto --format=long'
fi

# common variants of ls
alias ll='ls -l'
alias lh='ls -lh'
alias lls='ls -lhSr'
alias llh='ls -lh'
alias la='ls -A'
alias l='ls -CF'

alias d0='export DISPLAY=:0'

# 'less' passes ANSI colors
alias less='less -R'

# change to the top level directory of the nearest enclosing git repo
alias cdgr='cd $(git rev-parse --show-toplevel)'

alias updatebashrc='exec bash --login'

# useful for piping things in and out of
# e.g.:   grep foo * | clipput
alias clipget='xclip -selection clipboard -out'
alias clipput='xclip -selection clipboard'

alias dap='dcop amarok player'
alias amadd='dcop amarok playlist addMedia'
alias alert='play --silent /usr/share/sounds/phone.wav'

# ds will print a nice disk usage summary.  
# dsraw will do it without human-readable file sizes
alias dsraw='du -xs * | sort -n'   # find the piggies
alias ds='du -sx * | sort -n | cut -f 2- | while read a; do du -hs "$a"; done' 
alias dfh='df -h .'             # "dee eff here"

# also interesting: http://princ3.wordpress.com/2007/01/28/exclude-directories-from-find/

alias moutn=mount
alias grep='grep --color'
alias cgrep='grep --color=always'  # for use with pipes like less

alias cack='ack --cc --cpp'
alias ackl='ack --pager="less -R"'
alias cackl='ack --cc --cpp --pager="less -R"'

# be 'nice' about both io scheduling and CPU scheduling
alias verynice='ionice -c3 nice'

# remote copy (interactive); uses args like scp
# can resume partial transfers, but requires remote rsync
# note that -a means preserve attribs and do not follow symlinks
# add --bwlimit=N to limit to N kbyte/sec
alias rcopy='rsync -a --rsh=ssh --partial --progress'
alias lancopy='rsync --bwlimit=1000 -a --rsh=ssh --partial --progress'
alias slowcopy='rsync --bwlimit=100 -a --rsh=ssh --partial --progress'

alias cleanpending='rm /home/nathan/store/bt/pending/*.torrent'

# lancopy specifically to valis
function valisify() {
    rsync --bwlimit=1000 -a --rsh=ssh --partial --progress $* valis:/myth/videos
}

# lancopy specifically to boxee
function boxify() {
    rsync --bwlimit=1000 -a --partial --progress $* /media/boxee/
}

# ill-advised but handy
alias killswanks="psgrep swank | awk '{print $2}' | xargs kill"

# quick access to my small scale haskell experiments
[ -d ~/p/haskell/tidbits ] && alias tb="pushd ~/p/haskell/tidbits"

# misc. host-specifics
if [ $HOSTNAME = lildeb ]; then
    # silly hack for multi-ad workstation:
    alias d0='export DISPLAY=localhost:10.0'
    alias nxp='ssh octavius'
elif [ $HOSTNAME = dev1 ]; then  # crappy solaris workarounds
    alias wget='curl -O'
    alias top='TERM=xterm top -c -C infinity'
    alias less='TERM=xterm less -R'
    alias vi=vim
fi

# functional style "apply cmd arg0 [arg1 [...]]"
# -> cmd arg0; cmd arg1; ...
function apply () {
    cmd=$1
    shift
    for x in $*; do $cmd $x; done
}

# set the xterm window title (well, konsole tab title)
function settitle() { echo -ne "\e]2;$@\a\e]1;$@\a"; }

# http://brettterpstra.com/2013/03/14/more-command-line-handiness/
# ls archives (inspired by `extract`)
lsz() {
	if [ $# -ne 1 ]
	then
		echo "lsz filename.[tar,tgz,gz,zip,etc]"
		return 1
	fi
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2|*.tar.gz|*.tar|*.tbz2|*.tgz) tar tvf $1;;
			*.zip)  unzip -l $1;;
			*)      echo "'$1' unrecognized." ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# http://www.catonmat.net/blog/another-ten-one-liners-from-commandlinefu-explained
nicemount() { (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2=$4="";1') | column -t; }

# fun times: look something up on wikipedia via DNS query
wiki() { dig +short txt $1.wp.dg.cx; }


# http://mmb.pcb.ub.es/~carlesfe/unix/tricks.txt
function lt() { ls -ltrsa "$@" | tail; }
#function psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
function fname() { find . -iname "*$@*"; }



# http://wiki.github.com/rupa/j

# maintains a jump-list of directories you actually use
# old directories eventually fall off the list
# inspired by Joel Schaerer's http://wiki.github.com/joelthelion/autojump
# and something similar i had - but i could never get the dir list right.
#
# INSTALL:
#   source into .bashrc under your '[-z "$PS1" ] || return' line
#   cd around for a while
#
# USE:
#   j [--l] [regex1 ... regexn]
#     regex1 ... regexn jump to the most used directory matching all masks
#     --l               show the list instead of jumping
#                       with no args, returns full list
j() {
 # change jfile if you already have a .j file for something else
 local jfile=$HOME/.j
 if [ "$1" = "--add" ]; then
  shift
  # we're in $HOME all the time, let something else get all the good letters
  [ "$*" = "$HOME" ] && return
  awk -v q="$*" -F"|" '
   $2 >= 1 { 
    if( $1 == q ) { l[$1] = $2 + 1; found = 1 } else l[$1] = $2
    count += $2
   }
   END {
    found || l[q] = 1
    if( count > 1000 ) {
     for( i in l ) print i "|" 0.9*l[i] # aging
    } else for( i in l ) print i "|" l[i]
   }
  ' $jfile 2>/dev/null > $jfile.tmp
  mv -f $jfile.tmp $jfile
 elif [ "$1" = "" -o "$1" = "--l" ];then
  shift
  awk -v q="$*" -F"|" '
   BEGIN { split(q,a," ") }
   { for( i in a ) $1 !~ a[i] && $1 = ""; if( $1 ) print $2 "\t" $1 }
  ' $jfile 2>/dev/null | sort -n
 # for completion
 elif [ "$1" = "--complete" ];then
  awk -v q="$2" -F"|" '
   BEGIN { split(substr(q,3),a," ") }
   { for( i in a ) $1 !~ a[i] && $1 = ""; if( $1 ) print $1 }
  ' $jfile 2>/dev/null
 # if we hit enter on a completion just go there (ugh, this is ugly)
 elif [[ "$*" =~ "/" ]]; then
  local x=$*; x=/${x#*/}; [ -d "$x" ] && cd "$x"
 else
  # prefer case sensitive
  local cd=$(awk -v q="$*" -F"|" '
   BEGIN { split(q,a," ") }
   { for( i in a ) $1 !~ a[i] && $1 = ""; if( $1 ) { print $2 "\t" $1; x = 1 } }
   END {
    if( x ) exit
    close(FILENAME)
    while( getline < FILENAME ) {
     for( i in a ) tolower($1) !~ tolower(a[i]) && $1 = ""
     if( $1 ) print $2 "\t" $1
    }
   }
  ' $jfile 2>/dev/null | sort -nr | head -n 1 | cut -f 2)
  [ "$cd" ] && cd "$cd"
 fi
}
# bash completions for j
complete -C 'j --complete "$COMP_LINE"' j
# prepend to PROMPT_COMMAND
PROMPT_COMMAND='j --add "$(pwd -P)";'"$PROMPT_COMMAND"

